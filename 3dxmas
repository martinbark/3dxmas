#!/usr/bin/env node
/* eslint no-console: ["error", { allow: ["log", "warn", "error"] }] */

const async = require('async');
const gpio = (process.env.NODE_ENV === 'test') ? undefined : require('rpi-gpio');
const lightsInOrder = require('./lib/lightsInOrder.json');

const animations = {
  lightsInOrder,
};

const states = {
  ON: true,
  OFF: false,
};

const ledToGpioPin = {
  1: 3,
  2: 7,
  3: 8,
  4: 10,
  5: 11,
  6: 12,
  7: 13,
  8: 15,
  9: 16,
  10: 18,
  11: 19,
  12: 21,
  13: 22,
  14: 23,
  15: 24,
  16: 26,
  17: 29,
  18: 31,
  19: 32,
  20: 33,
  21: 35,
  22: 36,
  23: 37,
  24: 38,
  25: 40,
};

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function gpioSetup(led, pin, done) {
  console.log(`LED ${led}, pin ${pin}: setup`);
  if (process.env.NODE_ENV === 'test') {
    return done(null);
  }
  return gpio.setup(pin, gpio.DIR_OUT, done);
}

function gpioWrite(led, state, done) {
  const pin = ledToGpioPin[led];
  const value = states[state];
  console.log(`LED ${led}, pin ${pin}: ${value}`);
  if (process.env.NODE_ENV === 'test') {
    return done(null);
  }
  return gpio.write(pin, value, done);
}

function delayedWrite(pin, value, delay, callback) {
  setTimeout(() => {
    gpioWrite(pin, value, callback);
  }, delay);
}

function doAnimation(animationSeq, done) {
  async.eachSeries(animationSeq, (seq, next) => {
    delayedWrite(seq.led, seq.state, seq.delay || 100, next);
  }, (err) => done(err));
}

function pickAnimation(done) {
  const animationsKeys = Object.keys(animations);
  const randomAnimation = animationsKeys[getRandomInt(0, animationsKeys.length - 1)];
  console.log('Animation:', randomAnimation);
  doAnimation(animations[randomAnimation], done);
}

function run() {
  async.forever((forever) => {
    pickAnimation(forever);
  }, (err) => {
    console.error(err);
    process.exit(1);
  });
}

async.eachOf(ledToGpioPin, (pin, led, cb) => {
  gpioSetup(led, pin, cb);
}, (err) => {
  if (err) {
    console.error(err);
  }
  console.log('Pins setup');
  run();
});
